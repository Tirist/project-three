#!/usr/bin/env python3
"""
setup_environment.py

Interactive setup script for configuring the stock evaluation pipeline environment.
Helps users create .env file and validate their configuration.
"""

import os
import sys
import shutil
from pathlib import Path
from typing import Optional

def get_user_input(prompt: str, default: str = "", required: bool = True) -> str:
    """Get user input with validation."""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if required and not user_input:
            print("This field is required. Please provide a value.")
            continue
        
        return user_input

def create_env_file() -> bool:
    """Create .env file from user input."""
    print("\n" + "="*60)
    print("ENVIRONMENT SETUP")
    print("="*60)
    print("This script will help you create a .env file with your configuration.")
    print("You can skip any optional fields by pressing Enter.")
    print()
    
    # Check if .env already exists
    env_file = Path('.env')
    if env_file.exists():
        overwrite = input(".env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    # Get Alpha Vantage API key
    print("\nüîë Alpha Vantage API Key (Required)")
    print("Get your free API key from: https://www.alphavantage.co/support/#api-key")
    alpha_vantage_key = get_user_input("Enter your Alpha Vantage API key", required=True)
    
    # Get optional cloud storage configuration
    print("\n‚òÅÔ∏è  Cloud Storage Configuration (Optional)")
    print("Skip these if you're only using local storage.")
    
    use_cloud = input("Do you want to configure cloud storage? (y/N): ").strip().lower()
    
    cloud_config = {}
    if use_cloud == 'y':
        print("\nSelect cloud storage provider:")
        print("1. AWS S3")
        print("2. Google Cloud Storage")
        print("3. Azure Blob Storage")
        print("4. Skip cloud storage")
        
        choice = input("Enter your choice (1-4): ").strip()
        
        if choice == '1':
            # AWS S3 configuration
            print("\nAWS S3 Configuration:")
            cloud_config['aws_access_key_id'] = get_user_input("AWS Access Key ID", required=False)
            cloud_config['aws_secret_access_key'] = get_user_input("AWS Secret Access Key", required=False)
            cloud_config['aws_default_region'] = get_user_input("AWS Default Region", "us-east-1", required=False)
            
        elif choice == '2':
            # Google Cloud Storage configuration
            print("\nGoogle Cloud Storage Configuration:")
            creds_path = get_user_input("Path to service account key file", required=False)
            if creds_path:
                cloud_config['google_application_credentials'] = creds_path
                
        elif choice == '3':
            # Azure Blob Storage configuration
            print("\nAzure Blob Storage Configuration:")
            cloud_config['azure_storage_connection_string'] = get_user_input("Azure Storage Connection String", required=False)
    
    # Get optional performance configuration
    print("\n‚ö° Performance Configuration (Optional)")
    max_workers = get_user_input("Maximum number of workers", "4", required=False)
    chunk_size = get_user_input("Chunk size for data processing", "1000", required=False)
    
    # Create .env file content
    env_content = [
        "# Environment Variables for Stock Evaluation Pipeline",
        "# Generated by setup_environment.py",
        "",
        "# Alpha Vantage API Configuration",
        f"ALPHA_VANTAGE_API_KEY={alpha_vantage_key}",
        ""
    ]
    
    # Add cloud storage configuration
    if cloud_config:
        env_content.append("# Cloud Storage Configuration")
        for key, value in cloud_config.items():
            if value:
                env_content.append(f"{key.upper()}={value}")
        env_content.append("")
    
    # Add performance configuration
    if max_workers or chunk_size:
        env_content.append("# Performance Configuration")
        if max_workers:
            env_content.append(f"MAX_WORKERS={max_workers}")
        if chunk_size:
            env_content.append(f"CHUNK_SIZE={chunk_size}")
        env_content.append("")
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write('\n'.join(env_content))
        print(f"\n‚úÖ Created .env file successfully!")
        return True
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def copy_env_example() -> bool:
    """Copy .env.example to .env if it doesn't exist."""
    env_file = Path('.env')
    env_example = Path('.env.example')
    
    if env_file.exists():
        print("‚úÖ .env file already exists")
        return True
    
    if not env_example.exists():
        print("‚ùå .env.example file not found")
        return False
    
    try:
        shutil.copy('.env.example', '.env')
        print("‚úÖ Copied .env.example to .env")
        print("üìù Please edit .env file with your actual values")
        return True
    except Exception as e:
        print(f"‚ùå Error copying .env.example: {e}")
        return False

def validate_setup() -> bool:
    """Validate the current setup."""
    print("\n" + "="*60)
    print("VALIDATING SETUP")
    print("="*60)
    
    # Import validation functions
    try:
        sys.path.append('pipeline/utils')
        from config_validator import check_environment_setup, validate_config
        from common import load_config
    except ImportError as e:
        print(f"‚ùå Error importing validation modules: {e}")
        return False
    
    # Check environment setup
    env_ready = check_environment_setup()
    
    if not env_ready:
        return False
    
    # Load and validate configuration
    try:
        config = load_config("config/settings.yaml", "ohlcv")
        config_valid = validate_config(config)
        return config_valid
    except Exception as e:
        print(f"‚ùå Error validating configuration: {e}")
        return False

def main():
    """Main setup function."""
    print("üöÄ Stock Evaluation Pipeline Environment Setup")
    print("="*60)
    
    # Check if we're in the right directory
    if not Path('config/settings.yaml').exists():
        print("‚ùå Error: config/settings.yaml not found")
        print("Please run this script from the project root directory")
        sys.exit(1)
    
    # Ask user for setup method
    print("\nChoose setup method:")
    print("1. Interactive setup (recommended)")
    print("2. Copy .env.example and edit manually")
    print("3. Validate existing setup only")
    print("4. Exit")
    
    choice = input("\nEnter your choice (1-4): ").strip()
    
    if choice == '1':
        # Interactive setup
        if create_env_file():
            print("\nüîç Validating your setup...")
            if validate_setup():
                print("\nüéâ Setup completed successfully!")
                print("\nNext steps:")
                print("1. Run the pipeline: python pipeline/run_pipeline.py")
                print("2. Check logs in the logs/ directory")
                print("3. View data in the data/ directory")
            else:
                print("\n‚ö†Ô∏è  Setup completed but validation failed.")
                print("Please check the errors above and fix them.")
        else:
            print("\n‚ùå Setup failed. Please try again.")
    
    elif choice == '2':
        # Copy .env.example
        if copy_env_example():
            print("\nüìù Please edit the .env file with your actual values:")
            print("   - Add your Alpha Vantage API key")
            print("   - Add any cloud storage credentials if needed")
            print("   - Save the file and run validation")
        else:
            print("\n‚ùå Failed to copy .env.example")
    
    elif choice == '3':
        # Validate only
        if validate_setup():
            print("\n‚úÖ Setup is valid!")
        else:
            print("\n‚ùå Setup validation failed")
    
    elif choice == '4':
        print("Setup cancelled.")
    
    else:
        print("Invalid choice. Please run the script again.")

if __name__ == "__main__":
    main() 